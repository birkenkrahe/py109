#+startup: overview inlineimages indent hideblocks
#+options: toc:nil num:nil
#+property: header-args:python :results output 
* README

- Notes usually based on whiteboard screenshots ([[https://drive.google.com/drive/folders/1_UwbKsqmefLu97aVizfUE_qCYeg6IvHm?usp=sharing][GDrive]]).
- Includes further reading, watching and comments

* 1.1 Monday, 21-Aug

- R vs. Python: two dominant data science languages ([[https://www.datacamp.com/blog/python-vs-r-for-data-science-whats-the-difference?irclickid=0a2UQaStbxyNWhXRYE2FCwsmUkF3qu3eNVpDxo0&irgwc=1&utm_medium=affiliate&utm_source=impact&utm_campaign=000000_1-1310690_2-mix_3-all_4-na_5-na_6-na_7-mp_8-affl-ip_9-na_10-bau_11-Admitad%20-%201310690&utm_content=TEXT_LINK&utm_term=442763][more on the DataCamp blog]])
- OOP = Object-Oriented Programming. [[https://campus.datacamp.com/courses/introduction-to-programming-paradigms/object-oriented-programming?ex=1][See DataCamp course chapter]].
- TIOBE: software quality control, also ranking site based on searches
  ([[https://tiobe.com/index][tiobe.com/index]]). Little change among the top 10 languages. "TIOBE"
  stands for "The Importance Of Being Earnest" ([[https://en.wikipedia.org/wiki/The_Importance_of_Being_Earnest][play by Oscar Wilde]]).
- HTML = HyperText Markup Language. Not a programming language at all,
  but a language of meta data for layout. ([[https://www.freecodecamp.org/news/search?query=HTML][learn it @freeCodeCamp]]).
- C++ is a superset of C, i.e. C is fully contained within C++
  (more on C vs. C++ [[https://www.freecodecamp.org/news/c-vs-cpp-whats-the-difference/][@freeCodeCamp]]).
- Scrum: agile project management method originating from software
  engineering and now used much elsewhere ([[https://youtu.be/SWDhGSZNF9M][Scrum in 20 min - video]]).

* 1.2 Wednesday, 23-Aug

- Opened DataCamp workspace to a sample notebook
  at tinyurl.com/WorkspaceDemoPython
- Workspace has sample data, code along webinars. It runs on a virtual
  Linux server (16GB RAM and 8 vCPUs).
- Interactive notebooks are much easier to use than files because
  documentation, code and output are all integrated already.
- These are the steps that we save when using workspace: 1) Opening
  Jupyter Lab launcher; 2) Opening a file editor for our first Python
  file ("hello world"); 3) saving the file with the ending .py; 4)
  opening a terminal and finding the file; 5) executing the file with
  the ~python3~ command.
- CSV files (.csv) are comma-separated-value files i.e. individual
  values for the cells of a table are separated by a comma.

* 1.3 Friday, 25-Aug

- "Dynamically typed" languages take care of memory management for
  data types (e.g. integer, floating point, character).
- "Cheat sheets" are collections of useful commands.
- Python libraries (like ~pandas~) contain useful functions that you can
  use in your code if you link (aka ~import~) the library first.
- ~pandas~ is a library for the manipulation of tabular data (called
  data frames). It is usually imported as the alias ~pd~.
- The interactive notebook (aka workspace) contains text cells and
  code cells. Text cells can be edited, code cells can be run. The
  output appears below the code cell.

** Week review

1. What are the graded course activities?
2. What is a sprint review?
3. Which tools are we using in this course?
4. Is "Python code is indented" a programming paradigm?
5. How many paradigms does Python support?
6. Can you give an example of "modular code"?
7. Which tools can you find in DataCamp workspace?
8. Terminal / shell / Command line interface
9. What are unicorn companies?
10. ~pandas~ and ~pd.read_csv~

** Week preview

- [ ] Complete DataCamp workspace demo online
- [ ] Friday: talk about the project/first sprint review
- [ ] Tuesday: complete the first test (max 30 min)
- [ ] Tuesday/Thursday: complete the next DataCamp lesson (max 30 min)

* 2.1 Monday, 28-Aug

- Testing the AI coding assistant.
- Reading error messages (beginner: jump to the end).
- Positional function arguments (function decides based on position
  what it is).
- To get help for the ~unique~ function in ~pandas~, use ~help(unique)~.
- Syntax highlighting will help you distinguish (reserved) keywords.
- When looking for help in the documentation, jump to the end to see
  the examples.
- If variables or functions aren't defined, you may have to run
  previous cells again (see ~Run~ tab in workspace).
- Extracting a data frame column with the index operator ~[]~,
  e.g. ~df['Category']~ for the column named ~'Category'~ in ~df~.
- To print items one per line (with a dummy variable), loop over the
  values and ~print~ them one by one, or use a /list comprehension/.
- Python can be written in a very condensed way ("one-liners").

* 2.2 Wednesday, 30-Aug

- The dot operator allows you to access functions or attributes in
  so-called classes (categories), e.g. ~pd.unique~ or
  ~str.lower().title()~.
- Python errors are named.
- The ~[]~ operator is an index operator when it follows a structure
  like a data frame, or the delimiter for the ~list~ data structure.
- Grouping records by a values of a column using ~group_by~.
- The 'not defined' error message may mean that some cells (with
  definitions, e.g. to create a data frame) were not run.
- Looking information up online.
- Shared editing allows you to write code or text in other people's
  notebooks.
- Computing the ~size~ of a subset and sorting it.
- Quick barplot plotting with ~plotly.express.bar~.
- Checking a data type with ~type~.

* 2.3 Friday, 1-Sep

** Review

- What does the ~.~ operator do?
- What does the ~[]~ operator do?
- What could the error "not defined" mean when you work in a notebook
  with multiple code cells?
- What is the format of a Python error message?
- How can you share the same workspace so that you can edit each
  other's files?
- What's a bar plot?
- How can you check the type of data?

** Python basics

Practice file: https://tinyurl.com/BasicsPython

** Summary

- How to enter images and links in the notebook text cells.
- Expressions are basic programming instructions for the computer.
- The computer always tries to reduce it to the shortest form by
  evaluating all operations.
- Python has named error messages: ~NameError~, ~TypeError~, ~SyntaxError~,
  ~ValueError~ and so forth.
  1) ~SyntaxError~: using a reserved keyword as a variable name.
     #+begin_src python :results silent
       print(x = "2)
     #+end_src
  2) ~NameError~: a variable name is not defined.
     #+begin_src python :results silent
       print(x)
     #+end_src
  3) ~ValueError~:
     #+begin_src python :results silent
       int("a")
     #+end_src
  4) ~TypeError~: applying a function to the wrong object.
     #+begin_src python :results silent
       x = 1
       x()
     #+end_src
- Python has data types: ~int~, ~float~ and ~str~. You can check them: ~type~

* 3.1 Wednesday, 6-Sep

** Review DataCamp lesson 2 - Procedural programming
*** Concepts

- What's a procedure?
  #+begin_quote
  A series of steps that can be referenced and reused.
  #+end_quote
- How are procedures implemented in Python?
  #+begin_quote
  As functions, e.g. ~def hello(): print("hello")~
  #+end_quote
- When is procedural programming used?
  #+begin_quote
  When a problem can be broken down into steps.
  #+end_quote

*** Code

- Define two variables ~my_height~ and ~your_height~ and assign values to
  them, e.g. 180 cm and 170 cm.
  #+begin_src python
    my_height = 180
    your_height = 175
  #+end_src
- Make a list ~height_list~ that contains the heights of four people:
  179 cm, 185 cm, 175 cm and 189 cm.

  /Tip: ~[1,2,3]~ is a list of numbers./
  #+begin_src python
    height_list = [179,185,175,189]
  #+end_src
- Write a /conditional statement/ (with ~if~) that checks if ~my_height~ is
  greater than ~your_height~. If it is, print ~I'm taller~.
  #+begin_src python
    if my_height > your_height:
        print("I'm taller")
  #+end_src
- Write a loop (with ~for~) that loops over the variable ~height~ in
  ~height_list~ and prints out the ~height~ for every element of
  ~height_list~:
  #+begin_src python
    for heigth in height_list:
        print(height)
  #+end_src
- Put the conditional inside the loop and if ~my_height~ is greater than
  the ~height~ element of the list, then print ~I'm taller than~ and the
  ~height~.
  #+begin_src python
    for height in height_list:
        if my_height > height:
            print("I'm taller", height)
  #+end_src

*** Creativity

- Create a function ~hello~ that says "Hi, [yourname]":
  #+begin_src python :results silent
    def hello():
        print("Hi, Marcus")
  #+end_src

- Call the function.
  #+begin_src python
    hello()
  #+end_src

  #+RESULTS:
  : Hi, Marcus

- Modify the function and rename it to ~hello_name~: add ~name~ as an
  argument, and print ~name~. Call the function with different names.
  #+begin_src python
    def hello_name(name):
        print(name)
        return

    hello_name("Marcus")
    hello_name("Jane")
    hello_name("John")
  #+end_src

  #+RESULTS:
  : Marcus
  : Jane
  : John

- Add a conditional to the function and rename it to ~hello_if~: print
  the name only if it begins with the letter ~'J'~.
  #+begin_src python
    def hello_if(name):
        if name[0]=='J':
            print(name)
        return

    hello_if("Marcus")
    hello_if("Jane")
    hello_if("John")    
  #+end_src

  #+RESULTS:
  : Jane
  : John
  
- Add a loop to the function and rename it to ~hello_for~:
  1) Change the argument to ~name_list~.
  2) Loop over ~name_list~ and greet each name with "hello".
  3) Outside the function, before calling it, define a list of names
     ~name_list~ with the names "Saige","Lou","Ethan","Loren".
  4) Call the function with the argument ~name_list~.
  #+begin_src python
    def hello_for(name_list):
        for name in name_list:
            print("Hello,", name)
        return

    name_list = ["Saige","Lou","Ethan","Loren"]
    hello_for(name_list)
  #+end_src

  #+RESULTS:
  : Hello, Saige
  : Hello, Lou
  : Hello, Ethan
  : Hello, Loren

** DataCamp lesson schedule changed! (Start with "Intro")
** Complete test 2 on Thursday! (To be published)
** Friday: we'll talk about projects (Think about something)

* 3.2 Friday, 8-Sep

** Any questions on test 2?
** Finish reviewing DataCamp lesson 2 (procedures)

