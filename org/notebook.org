#+startup: overview inlineimages indent hideblocks
#+options: toc:nil num:nil
#+property: header-args:python :results output :session *Python* :exports both :noweb yes
* README

- Notes usually based on whiteboard screenshots ([[https://drive.google.com/drive/folders/1_UwbKsqmefLu97aVizfUE_qCYeg6IvHm?usp=sharing][GDrive]]).
- Includes further reading, watching and comments

* DONE First part of term
** 1.1 Mon, 21-Aug

- R vs. Python: two dominant data science languages ([[https://www.datacamp.com/blog/python-vs-r-for-data-science-whats-the-difference?irclickid=0a2UQaStbxyNWhXRYE2FCwsmUkF3qu3eNVpDxo0&irgwc=1&utm_medium=affiliate&utm_source=impact&utm_campaign=000000_1-1310690_2-mix_3-all_4-na_5-na_6-na_7-mp_8-affl-ip_9-na_10-bau_11-Admitad%20-%201310690&utm_content=TEXT_LINK&utm_term=442763][more on the
  DataCamp blog]])
- OOP = Object-Oriented Programming. [[https://campus.datacamp.com/courses/introduction-to-programming-paradigms/object-oriented-programming?ex=1][See DataCamp course chapter]].
- TIOBE: software quality control, also ranking site based on searches
  ([[https://tiobe.com/index][tiobe.com/index]]). Little change among the top 10 languages. "TIOBE"
  stands for "The Importance Of Being Earnest" ([[https://en.wikipedia.org/wiki/The_Importance_of_Being_Earnest][play by Oscar Wilde]]).
- HTML = HyperText Markup Language. Not a programming language at all,
  but a language of meta data for layout. ([[https://www.freecodecamp.org/news/search?query=HTML][learn it @freeCodeCamp]]).
- C++ is a superset of C, i.e. C is fully contained within C++ (more
  on C vs. C++ [[https://www.freecodecamp.org/news/c-vs-cpp-whats-the-difference/][@freeCodeCamp]]).
- Scrum: agile project management method originating from software
  engineering and now used much elsewhere ([[https://youtu.be/SWDhGSZNF9M][Scrum in 20 min - video]]).

** 1.2 Wed, 23-Aug

- Opened DataCamp workspace to a sample notebook
  at tinyurl.com/WorkspaceDemoPython
- Workspace has sample data, code along webinars. It runs on a virtual
  Linux server (16GB RAM and 8 vCPUs).
- Interactive notebooks are much easier to use than files because
  documentation, code and output are all integrated already.
- These are the steps that we save when using workspace: 1) Opening
  Jupyter Lab launcher; 2) Opening a file editor for our first Python
  file ("hello world"); 3) saving the file with the ending .py; 4)
  opening a terminal and finding the file; 5) executing the file with
  the ~python3~ command.
- CSV files (.csv) are comma-separated-value files i.e. individual
  values for the cells of a table are separated by a comma.

** 1.3 Fri, 25-Aug

- "Dynamically typed" languages take care of memory management for
  data types (e.g. integer, floating point, character).
- "Cheat sheets" are collections of useful commands.
- Python libraries (like ~pandas~) contain useful functions that you can
  use in your code if you link (aka ~import~) the library first.
- ~pandas~ is a library for the manipulation of tabular data (called
  data frames). It is usually imported as the alias ~pd~.
- The interactive notebook (aka workspace) contains text cells and
  code cells. Text cells can be edited, code cells can be run. The
  output appears below the code cell.

*** Week review

1. What are the graded course activities?
2. What is a sprint review?
3. Which tools are we using in this course?
4. Is "Python code is indented" a programming paradigm?
5. How many paradigms does Python support?
6. Can you give an example of "modular code"?
7. Which tools can you find in DataCamp workspace?
8. Terminal / shell / Command line interface
9. What are unicorn companies?
10. ~pandas~ and ~pd.read_csv~

*** Week preview

- [ ] Complete DataCamp workspace demo online
- [ ] Friday: talk about the project/first sprint review
- [ ] Tuesday: complete the first test (max 30 min)
- [ ] Tuesday/Thursday: complete the next DataCamp lesson (max 30 min)

** 2.1 Mon, 28-Aug

- Testing the AI coding assistant.
- Reading error messages (beginner: jump to the end).
- Positional function arguments (function decides based on position
  what it is).
- To get help for the ~unique~ function in ~pandas~, use ~help(unique)~.
- Syntax highlighting will help you distinguish (reserved) keywords.
- When looking for help in the documentation, jump to the end to see
  the examples.
- If variables or functions aren't defined, you may have to run
  previous cells again (see ~Run~ tab in workspace).
- Extracting a data frame column with the index operator ~[]~,
  e.g. ~df['Category']~ for the column named ~'Category'~ in ~df~.
- To print items one per line (with a dummy variable), loop over the
  values and ~print~ them one by one, or use a /list comprehension/.
- Python can be written in a very condensed way ("one-liners").

** 2.2 Wed, 30-Aug

- The dot operator allows you to access functions or attributes in
  so-called classes (categories), e.g. ~pd.unique~ or
  ~str.lower().title()~.
- Python errors are named.
- The ~[]~ operator is an index operator when it follows a structure
  like a data frame, or the delimiter for the ~list~ data structure.
- Grouping records by a values of a column using ~group_by~.
- The 'not defined' error message may mean that some cells (with
  definitions, e.g. to create a data frame) were not run.
- Looking information up online.
- Shared editing allows you to write code or text in other people's
  notebooks.
- Computing the ~size~ of a subset and sorting it.
- Quick barplot plotting with ~plotly.express.bar~.
- Checking a data type with ~type~.

** 2.3 Fri, 1-Sep

*** Review

- What does the ~.~ operator do?
- What does the ~[]~ operator do?
- What could the error "not defined" mean when you work in a notebook
  with multiple code cells?
- What is the format of a Python error message?
- How can you share the same workspace so that you can edit each
  other's files?
- What's a bar plot?
- How can you check the type of data?

*** Python basics

Practice file: https://tinyurl.com/BasicsPython

*** Summary

- How to enter images and links in the notebook text cells.
- Expressions are basic programming instructions for the computer.
- The computer always tries to reduce it to the shortest form by
  evaluating all operations.
- Python has named error messages: ~NameError~, ~TypeError~, ~SyntaxError~,
  ~ValueError~ and so forth.
  1) ~SyntaxError~: using a reserved keyword as a variable name.
     #+begin_src python :results silent
       print(x = "2)
     #+end_src
  2) ~NameError~: a variable name is not defined.
     #+begin_src python :results silent
       print(x)
     #+end_src
  3) ~ValueError~:
     #+begin_src python :results silent
       int("a")
     #+end_src
  4) ~TypeError~: applying a function to the wrong object.
     #+begin_src python :results silent
       x = 1
       x()
     #+end_src
- Python has data types: ~int~, ~float~ and ~str~. You can check them: ~type~

** 3.1 Wed, 6-Sep

*** Review DataCamp lesson 2 - Procedural programming
**** Concepts

- What's a procedure?
  #+begin_quote
  A series of steps that can be referenced and reused.
  #+end_quote
- How are procedures implemented in Python?
  #+begin_quote
  As functions, e.g. ~def hello(): print("hello")~
  #+end_quote
- When is procedural programming used?
  #+begin_quote
  When a problem can be broken down into steps.
  #+end_quote

**** Code

- Define two variables ~my_height~ and ~your_height~ and assign values to
  them, e.g. 180 cm and 170 cm.
  #+begin_src python
    my_height = 180
    your_height = 175
  #+end_src
- Make a list ~height_list~ that contains the heights of four people:
  179 cm, 185 cm, 175 cm and 189 cm.

  /Tip: ~[1,2,3]~ is a list of numbers./
  #+begin_src python
    height_list = [179,185,175,189]
  #+end_src
- Write a /conditional statement/ (with ~if~) that checks if ~my_height~ is
  greater than ~your_height~. If it is, print ~I'm taller~.
  #+begin_src python
    if my_height > your_height:
        print("I'm taller")
  #+end_src
- Write a loop (with ~for~) that loops over the variable ~height~ in
  ~height_list~ and prints out the ~height~ for every element of
  ~height_list~:
  #+begin_src python
    for heigth in height_list:
        print(height)
  #+end_src
- Put the conditional inside the loop and if ~my_height~ is greater than
  the ~height~ element of the list, then print ~I'm taller than~ and the
  ~height~.
  #+begin_src python
    for height in height_list:
        if my_height > height:
            print("I'm taller", height)
  #+end_src

**** Creativity

- Create a function ~hello~ that says "Hi, [yourname]":
  #+begin_src python :results silent
    def hello():
        print("Hi, Marcus")
  #+end_src

- Call the function.
  #+begin_src python
    hello()
  #+end_src

  #+RESULTS:
  : Hi, Marcus

- Modify the function and rename it to ~hello_name~: add ~name~ as an
  argument, and print ~name~. Call the function with different names.
  #+begin_src python
    def hello_name(name):
        print(name)
        return

    hello_name("Marcus")
    hello_name("Jane")
    hello_name("John")
  #+end_src

  #+RESULTS:
  : Marcus
  : Jane
  : John

- Add a conditional to the function and rename it to ~hello_if~: print
  the name only if it begins with the letter ~'J'~.
  #+begin_src python
    def hello_if(name):
        if name[0]=='J':
            print(name)
        return

    hello_if("Marcus")
    hello_if("Jane")
    hello_if("John")
  #+end_src

  #+RESULTS:
  : Jane
  : John

- Add a loop to the function and rename it to ~hello_for~:
  1) Change the argument to ~name_list~.
  2) Loop over ~name_list~ and greet each name with "hello".
  3) Outside the function, before calling it, define a list of names
     ~name_list~ with the names "Saige","Lou","Ethan","Loren".
  4) Call the function with the argument ~name_list~.
  #+begin_src python
    def hello_for(name_list):
        for name in name_list:
            print("Hello,", name)
        return

    name_list = ["Saige","Lou","Ethan","Loren"]
    hello_for(name_list)
  #+end_src

  #+RESULTS:
  : Hello, Saige
  : Hello, Lou
  : Hello, Ethan
  : Hello, Loren

*** DataCamp lesson schedule changed! (Start with "Intro")
*** Complete test 2 on Thursday! (To be published)
*** Friday: we'll talk about projects (Think about something)

** 3.2 Fri, 8-Sep
*** Reviewing test 2

- In the statement ~x = 1~,
  1) ~x~ is an integer variable (naming conventions apply)
  2) ~=~ is an assignment operator (assigns RHS to LHS)
  3) ~1~ is a numeric value (integer or ~int~ data type)

- In the statement ~name = "Joe"~,
  1) ~name~ is a string variable
  2) ~=~ is an assignment operator (assigns RHS to LHS)
  3) ~"Marcus"~ is a string of six characters
  4) Once assigned, ~name[0]~ is ~'J'~ etc.
     #+begin_src python
       name = 'Joe'
       for i in name: print(i)
     #+end_src

     #+RESULTS:
     : J
     : o
     : e

- Logical operators result in Boolean values (~True~ or ~False~):
  #+begin_src python
    x = 1   # store 1 in x
    print(x == 1)  # output: True because x = 1
    print(x > 1)   # output: False because x is not greater than 1
    print(x >= 1)  # output: True because x is greater or equal than 1
    print(x != 1)  # output: False because x = 1
  #+end_src

- Question: can you assign all values EXCEPT 1 to a variable?
  #+begin_quote
  You can use unpacking to assign all values in a list to variables,
  and you can use ~*~ to assign all values except some to a variable as
  a list:
  #+end_quote
  #+begin_src python
    numbers = [1,2,3,4,5]
    first, *rest = numbers
    print(first, rest)
    print(numbers[1:-1])
  #+end_src

  #+RESULTS:
  : 1 [2, 3, 4, 5]
  : [2, 3, 4]

*** Finish reviewing DataCamp lesson 2 (procedures)
*** Getting grades into "hack"? (Answer)
** 4.1 Mon, 11-Sep

- Finished "Python Basics" ([[https://github.com/birkenkrahe/py109/blob/main/pdf/1_basics.pdf][handout]] / [[https://app.datacamp.com/workspace/w/edc90964-9713-4674-a19e-441e2ff4eddb/edit][notebook]])
- Learnt about naming conventions in Python
- Learnt about string concatenation and replication
- Wrote a short program ~spooky.py~ as a notebook

** 4.2 Wed, 13-Sep

- NO CLASS ON FRIDAY: WORK ON PROJECTS/ASSIGNMENTS INSTEAD
- How to get "dark mode" for DataCamp workspace
- Review of DataCamp chapter "Introduction to Python: Python Basics"
- Getting and processing input from the keyboard
- Get started with Google Colaboratory (colab.research.google.com)
- ~input()~ works in the Jupyter Lab notebook (via the ~View~ tab).

** 4.3 Fri, 15-Sep (no class: sprint review)
** 5.1 Mon, 18-Sep
*** Monthly summary

- What can you say about Python?

- What can you say about the command line interface (CLI)?

- What can you say about interactive notebooks?

- What can you say about Python libraries?

- What can you say about the AI?

- What can you say about Python errors?

*** Finish Python ~input~ Basics (workspace)
*** DataCamp assignments: you've got more time!
*** Discuss the programming assignments (for Tue)

- Introduce programming assignments ([[https://lyon.instructure.com/courses/2006/assignments/15592][word count]] / [[https://lyon.instructure.com/courses/2006/assignments/15579][A New Hope]])

*** Discuss project ideas

- Talk about projects ([[https://lyon.instructure.com/courses/2006/pages/project-idea-s][sign up sheet]])

*** Next test (3) for Thursday (basic Python)

- Python Basic practice
- Python Input practice
- DataCamp Python intro chapter 1

** 5.2 Tue, 19-Sep - Work on programming assignments

- Word count program (show your solutions)
- A New Hope program (show your solutions)

** 5.3 Wed, 20-Sep

*** Review programming assignments

- Solutions to [[https://gist.github.com/birkenkrahe/1b15fe6b573d22c5af08dc9584cfc086][word count assignment]]
- Solutions to [[https://gist.github.com/birkenkrahe/ef6f2f3229e9a25e03fc81e1f007456d][A New Hope]] assignment

*** Boolean variables, values and operators

- Important to master conditional statements (~if~, ~else~, ~elseif~)
- See workbook and practice notebook

*** No class on Friday (me = conference)
#+attr_html: :width 400px
[[../img/Absolute_Reality_v16_literate_programming_0.jpg]]

*** New DataCamp lesson "lists" - due Friday night
*** New test available tonight - due Monday

** 5.4 Thu, 21-Sep - Complete test 3
** 5.5 Fri, 22-Sep (no class - reading assignment)
** 6.1 Mon, 25-Sep
*** Review 1st sprint reviews - preview 2nd sprint

Please upload your proposals from the first sprint review to [[https://drive.google.com/drive/folders/1OyNNo1i83t626ChoZu8lAzZowKXtxQ01?usp=drive_link][this
GDrive repo]] (Lou has already done this).

To give you an idea about how the final result might look like: here
are two projects from my Python summer course - [[https://colab.research.google.com/drive/1CpIWEDXWOhyD5cSzpsqJqS7Q1RoPPBX3?usp=sharing][on web development]] (as
a notebook), and on [[https://drive.google.com/file/d/1iWmtlp9rAZZymkaVgKOXFWDcgOJunlI-/view?usp=sharing][training images with AI]] (as a paper).

For your second sprint, you need to do some literature research to
validate your research question and identify your method of approach.

The key deliverable is a curated, i.e. commented list of relevant
references that you have found and that apply to your project.

The reference citations need to be consistent (i.e. pick one style),
and complete. Software and digital tools, videos, personal
communication etc. needs to be referenced just like books or papers.

You should also describe your method in appropriate detail. For an
example see [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#what-should-we-do-in-the-second-sprint][this FAQ in GitHub]] (for an article of mine).

Upload your reference list [[https://drive.google.com/drive/folders/1A2PE2DawpWQ7Te0gCsq6cA7TmdtNQlQb?usp=sharing][to this GDrive repo]], and briefly present
your project in class.

*** Review pgm assignments [[https://lyon.instructure.com/courses/2006/assignments/15592][word count]]/[[https://lyon.instructure.com/courses/2006/assignments/15579][A New Hope]]

[[https://app.datacamp.com/workspace/w/a8e32458-35b1-4818-bb32-aee5d557cc78/edit][Workspace notebook with sample solutions.]]

Introduce bpmn.io with word count:
#+attr_latex: :width 400px
[[../img/wordCount1.png]]

*** Review test 3 ([[https://lyon.instructure.com/courses/2006/assignments/15598?display=full_width][Canvas]])

** 6.2 Tue, 26-Sep

- Tuesday/Thursday: complete the 2nd Intro to Python chapter at
  DataCamp.

** 6.3 Wed, 27-Sep
*** Flow control (BPMN)

- Visualizing flow
- Advantages and disadvantages of modeling (pseudocode)
- Practice: simple happy path model
- Extending the happy path model with gateways
- Boolean values in Python
- Comparison operators in Python

** 6.4 Thu, 28-Sep

- Tuesday/Thursday: complete the 2nd Intro to Python chapter at
  DataCamp.

** 6.5 Fri, 29-Sep

Different ways of getting into Python (on the PC/online):
- Console/IDLE: Download Python on your Windows machine (Microsoft
  Store): open it as a console ('Python' in the search bar) or as
  'IDLE' (from search bar)
- In IDLE you can create files and run them, including graphics or web
  pages.

REPL (Read-Eval-Print-Loop): Sign up with replit.com and create a
Python REPL: this gives you an editor (for .py files), and a console
(for the output) and a shell (for file management).

Online with w3schools.com: Online editor - won't do graphics or web
work.

Visual Studio Code (VSCode) at vscode.dev: Online IDE (Integrated
Development Environment) - owned by Microsoft, most popular editor
right now. You can download it to your PC.

The best Python editor: GNU Emacs + Org mode (that's for hackers
only): [[https://realpython.com/emacs-the-best-python-editor/][see more]].

** 7.1 Mon, 2-Oct: lists
*** Review Python lists - Preview Test 4

We're going to review [[https://campus.datacamp.com/courses/intro-to-python-for-data-science/chapter-2-python-lists?ex=1][Chapter 2 - Python Lists]] - you'll find some of
this (only the =list= stuff) in test 4, which will be available
tomorrow (Tue 3-Oct) for you to complete:
1. Creating and printing lists (as comprehensions)
2. Subsetting and slicing lists
3. Replacing and extending lists

-----

1) Make a =list= named ~fam~ of your family members that includes everybody's
   name followed by their age, and print it:
   #+begin_src python
     fam = ['Marcus', 59,
            'Carlye', 64,
            'Lucia', 22]
     print(fam)
   #+end_src

   #+RESULTS:
   : ['Marcus', 59, 'Carlye', 64, 'Lucia', 22]

2) Make another =list= named ~fam2~ with the same information but this time
   each family member and their age is a list item. So if you have 3
   family members, ~fam~ had 6 elements but ~fam2~ has only 3:
   #+begin_src python
     fam2 = [['Marcus', 59],
             ['Carlye', 64],
             ['Lucia', 22]]
     print(fam2)
   #+end_src

   #+RESULTS:
   : [['Marcus', 59], ['Carlye', 64], ['Lucia', 22]]

3) You can print lists as /comprehensions/, too, where ~foo~ is a (dummy)
   counter variable, and ~bar~ is a =list=:
   #+begin_src python
     [print(foo) for foo in bar]
   #+end_src
   Do this for both ~fam~ and ~fam2~ now:
   #+begin_src python
     [print(i) for i in fam]
     [print(i) for i in fam2]
   #+end_src

   #+RESULTS:
   : Marcus
   : 59
   : Carlye
   : 64
   : Lucia
   : 22
   : ['Marcus', 59]
   : ['Carlye', 64]
   : ['Lucia', 22]

4) Print only the names of ~fam2~ using the index operator =[]=:
   #+begin_src python
     print(fam2[0][0],fam2[1][0],fam2[2][0])
   #+end_src

   #+RESULTS:
   : Marcus Carlye Lucia

5) Print only the ages of the family members of ~fam2~:
   #+begin_src python
     print(fam2[0][1],fam2[1][1],fam2[2][1])
   #+end_src

   #+RESULTS:
   : 59 64 22

6) Use /slicing/ to print the last two elements of ~fam~ (there are two
   ways to do this). Remember that the first index before the slicing
   operator is the start, which is included, and the second index is
   the end, which is not included. Confusing!
   #+begin_src python
     print(fam)
     print(fam[4:])  # from 4 to end
     print(fam[4:6]) # from 4 to 6 (which does not exist)
     print(fam[6]) # Output: IndexError 'index out of range'
   #+end_src

   #+RESULTS:
   : ['Marcus', 59, 'Carlye', 64, 'Lucia', 22]
   : ['Lucia', 22]
   : ['Lucia', 22]

7) Print the last element of ~fam~ (there are two ways):
   #+begin_src python
     print(fam[-1])
     print(fam[5])
   #+end_src

   #+RESULTS:
   : 22
   : 22

8) Your name elements are probable in title or lower case. You can use
   =str.upper= to turn a string into upper case characters:
   #+begin_src python
     print("Marcus".upper())
   #+end_src
   Change the last name of your =list= ~fam~ to upper case, then print
   ~fam~.
   #+begin_src python
     print(fam)
     print(fam[4].upper())
     fam[4] = fam[4].upper()
     print(fam)
   #+end_src

   #+RESULTS:
   : ['Marcus', 59, 'Carlye', 64, 'Lucia', 22]
   : LUCIA
   : ['Marcus', 59, 'Carlye', 64, 'LUCIA', 22]

9) Turn the last element of your list into a string:
   #+begin_src python
     fam[-1] = str(fam[-1])
     print(fam)
   #+end_src

   #+RESULTS:
   : ['Marcus', 59, 'Carlye', 64, 'LUCIA', '22']

10) Assume you get a cat named "Millie". She is 3 years old. Add her
    data to ~fam~:
    #+begin_src python
      fam = fam + ['Millie', 3]
      print(fam)
    #+end_src

    #+RESULTS:
    : ['Marcus', 59, 'Carlye', 64, 'LUCIA', '22', 'Millie', 3]

11) You give your cat Millie to a friend who is lonely. Remove her
    data from the =list= ~fam~, then print it.
    #+begin_src python
      del(fam[6:])  # this will apply to fam immediately!
      print(fam)
    #+end_src

    #+RESULTS:
    : ['Marcus', 59, 'Carlye', 64, 'LUCIA', '22']

12) What is ~foo~ at the end of the following code block? Remember that
    lists are references to computer memory locations.
    #+begin_src python
      foo = [1,2,3]
      bar = foo
      bar[2:4] = [5,6]
      print(bar)
    #+end_src

    #+RESULTS:
    : [1, 2, 5, 6]

13) When copying ~foo~ into ~bar~ and then changing ~bar~ as before, how can
    you keep ~foo~ unchanged?
    #+begin_src python
      foo = [1,2,3]
      bar = list(foo)  # copies foo values into bar
      bar[2:4] = [5,6]
      print(f'bar: {bar}\nfoo: {foo}')
    #+end_src

    #+RESULTS:
    : bar: [1, 2, 5, 6]
    : foo: [1, 2, 3]

*** Continue: Boolean values and operators
** 7.2 Tue, 3-Oct: test 4

[[https://lyon.instructure.com/courses/2006/assignments/19350/edit?quiz_lti][Complete test 4 (Python lists)]]

** 7.3 Wed, 4-Oct: Booleans

Boolean values.

** 7.4 Thu, 5-Oct: pgm assignment (Booleans)

Complete the programming assignment.

** 7.5 Fri, 6-Oct: DataCamp (functions/packages)
*** Preview of dictionaries, tuples and comprehensions

Here is a preview on even more data structures besides =list=, namely
=dictionary= and =tuple=:

1) Make a =list= of names ~course~ (class mates) and print it.
   #+begin_src python
     course = ["Saige", "Ethan", "Lou", "Loren"]
     print(course)
   #+end_src

   #+RESULTS:
   : ['Saige', 'Ethan', 'Lou', 'Loren']

2) The ~areas~ list from DataCamp can also be encoded as a Python
   =dictionary= (another data structure):
   #+begin_src python
     ## define variables
     hall = 11.25
     kit = 18.0
     liv = 20.0
     bed = 10.75
     bath = 9.50
     ## define dictionary of key: value pairs
     areas = {
         "hallway": hall,
         "kitchen": kit,
         "living room": liv,
         "bedroom": bed,
         "bathroom": bath}
     ## print the dictionary
     print(areas)
   #+end_src

   #+RESULTS:
   : {'hallway': 11.25, 'kitchen': 18.0, 'living room': 20.0, 'bedroom': 10.75, 'bathroom': 9.5}

3) Your turn! Make a dictionary of class mates ~course_dict~ with their
   name as key and their sex and age as values. For the key, use the
   relevant ~course~ =list= item:
   #+begin_src python
     course_dict = {
         course[0]: ["male",17],
         course[1]: ["male",17],
         course[2]: ["female",17],
         course[3]: ["female",17]
     }
     print(course_dict)
   #+end_src

   #+RESULTS:
   : {'Saige': ['male', 17], 'Ethan': ['male', 17], 'Lou': ['female', 17], 'Loren': ['female', 17]}

4) You can also print the list as a =for= loop:
   #+begin_src python
     for key, value in areas.items():
         print(f'Key: {key}, value: {value}')
   #+end_src

   #+RESULTS:
   : Key: hallway, value: 11.25
   : Key: kitchen, value: 18.0
   : Key: living room, value: 20.0
   : Key: bedroom, value: 10.75
   : Key: bathroom, value: 9.5

5) You turn! Print ~course_dict~ as a =for= loop!
   #+begin_src python
     for key, value in course_dict.items():
         print(f'Key: {key}, value: {value}')
   #+end_src

   #+RESULTS:
   : Key: Saige, value: ['male', 17]
   : Key: Ethan, value: ['male', 17]
   : Key: Lou, value: ['female', 17]
   : Key: Loren, value: ['female', 17]

6) You can also print this with a /comprehension/, a way of running a
   function with a loop and defining a data structure in one line:
   #+begin_src python
     output = [print(key,value) for key, value in areas.items()]
   #+end_src

   #+RESULTS:
   : hallway 11.25
   : kitchen 18.0
   : living room 20.0
   : bedroom 10.75
   : bathroom 9.5

7) Given the =list= ~course~ from earlier, how would you print the items
   line by line using a comprehension? This time you do not need
   =items=. The general format of a list comprehension is:
   #+begin_example python
     [ function(arg) for arg in list ]
   #+end_example
   Try that for the ~course~ =list=:
   #+begin_src python
     [print(name) for name in course]
   #+end_src

   #+RESULTS:
   : Saige
   : Ethan
   : Lou
   : Loren

8) Now, turn the dictionary ~areas~ into a =list= using the =list= function,
   then print it as a =list= comprehension:
   #+begin_src python
     areas_list = list(areas.items())
     [print(item) for item in areas_list]
   #+end_src

   #+RESULTS:
   : ('hallway', 11.25)
   : ('kitchen', 18.0)
   : ('living room', 20.0)
   : ('bedroom', 10.75)
   : ('bathroom', 9.5)

9) Notice the character of the =list= elements: they are tuples (ordered
   pairs of values) which you can check by checking the =type= of any
   element:
   #+begin_src python
     print(type(areas_list[0]))
   #+end_src

   #+RESULTS:
   : <class 'tuple'>

10) Since the =dictionary= has two types of elements, keys and values,
    you can put them into separate lists if you want:
    #+begin_src python
      areas_list_keys = areas.keys()
      print(areas_list_keys)
      areas_list_values = areas.values()
      print(areas_list_values)
    #+end_src

    #+RESULTS:
    : dict_keys(['hallway', 'kitchen', 'living room', 'bedroom', 'bathroom'])
    : dict_values([11.25, 18.0, 20.0, 10.75, 9.5])

** 8.3 Wed, 11-Oct: Review: Booleans
*** Preview: test 5 (Thursday)

For answers and code examples, see ~notebook.ipynb~ in [[https://app.datacamp.com/workspace/w/f87132bd-3262-4a0f-bbd8-cbbc8222b00a/edit][this workspace]].

- What's a function?
- How can you get help?
- What are function arguments and parameters?
- What's a method in Python, and are methods functions?
- Use a method to sort elements of a list.
  #+begin_src python
    foo = ["Saige", "Lou", "Ethan", "Loren"]
    print(foo)
    foo.sort()  # sorts the list 'in place'
    print(foo)
  #+end_src

  #+RESULTS:
  : ['Saige', 'Lou', 'Ethan', 'Loren']
  : ['Ethan', 'Loren', 'Lou', 'Saige']
- What's a package in Python?
- How can you import a package or module or function?
- What data type is the output of the function =max=?
- How many arguments do you have to supply to =round=?
- What does the =index= function do?
  #+begin_src python
    print(foo)
    print(foo.index('Lou'))
  #+end_src

  #+RESULTS:
  : ['Ethan', 'Loren', 'Lou', 'Saige']
  : 2

*** Review assignments (deadlines extended!)

- Assignment for Thu 5 Oct: bonus assignment similar to what we did in
  class today - "De Morgan's Laws"
  https://lyon.instructure.com/courses/2006/assignments/15585

  This assignment required using =if= statements.

- Assignments for Friday Oct 6: DataCamp lesson "Python functions and
  packages"
  https://lyon.instructure.com/courses/2006/assignments/18718

  We reviewed this lesson in class. See also test 5.

- Assignment for Monday, Oct 9: Truth tables - three logic exercises -
  truth tables: develop truth tables for three different problems (do
  at least one of these). Ex 1: create simple truth tables. Ex 2:
  simplify using De Morgan's laws, Ex.3 show equivalence between
  logical expressions. Do at least one of
  these. https://lyon.instructure.com/courses/2006/assignments/19440

  [[https://app.datacamp.com/workspace/w/4a2a3afc-f9e4-4857-abd5-3ca1f44b8c4b/edit][See examples in this notebook.]]

- Assignment for Tuesday, Oct 10: translate text scenarios into
  logical expressions (with Boolean operators), and then determine the
  truth values using a truth table, and interpret the results - do at
  least one of
  these. https://lyon.instructure.com/courses/2006/assignments/19441

  [[https://app.datacamp.com/workspace/w/4a2a3afc-f9e4-4857-abd5-3ca1f44b8c4b/edit][See examples in this notebook.]]

** 8.4 Thu, 12-Oct: Complete test 5

...And work on various bonus exercises (pick any of these):
- [[https://lyon.instructure.com/courses/2006/assignments/15596][Spam]]: store an input string & print it in different =print= formats
- [[https://lyon.instructure.com/courses/2006/assignments/15588][Formatted truth tables]]: =print= the truth table as an actual table
- [[https://lyon.instructure.com/courses/2006/assignments/15582][Cone drill]]: calculate a simple formula.

  You can do all of these in your own time, more or less: the
  deadlines are end of October by when I will give you sample solutions.

** 8.5 Fri, 13-Oct: If, else, alif

- Review: test 5
- Conditional statements I

* DONE 9.1 Mon, 16-Oct: Summary / Sprint review
#+caption: Photo of a female 'Python Hacker' action figure in clear plastic wrapping. The figure sports a black hoodie with a prominent white Python logo. She has a utility belt filled with mini computer devices and USB drives. Posing confidently, one hand holds a mini tablet displaying code, while the other is poised with a stylus. The packaging features graphics such as 'Code Queen!', 'Debugging Diva!', 'Scripting Superstar!', and 'Automation Ace!' with illustrations of her masterfully navigating a digital landscape and resolving complex coding challenges.
#+attr_latex: :width 400px
[[../img/PythonSuperhero.png]]

** Monthly summary

Status: we're one week behind schedule.

**** Extras (Google Space/chat)
#+attr_html: :width 300px
[[../img/ring.png]]
1. Presentation: Generative AI in education
2. Realpython tutorial: Python operators and expressions
3. Python styleguide
4. FreeCodeCamp course: Ultimate beginner's Python course (9 hrs)
5. Tutorial: Using AI in DataCamp workspace
6. Google Cybersecurity Certificate
7. FreeCodeCamp course: Intermediate Python (6 hrs)
8. Blog: Top 5 Practices in Python
9. Realpython exercises: conditional logic
10. Blog: 10 Essential Python skills all data scientists should master
11. Realpython: new features in Python 3.12
12. FreeCodeCamp tutorial: VS Code - become more productive (6 hrs)
13. Realpython tutorial: min() and max()
14. Realpython tutorial: how to sort unicode strings
15. Coding with Minecraft in Python: Visualmodder.org

**** Concepts

#+begin_quote
"[School] bored me. The teachers behaved like sergeants. I wanted to
learn what I wanted to know, but they wanted me to learn for the
exam. What I hated most was the competitive system there, and
especially sports. Because of this, I wasn't worth anything, and
several times they suggested I leave. [...] I felt that my thirst for
knowledge was being strangled by my teachers; grades were their only
measurement. (Albert Einstein)
#+end_quote

- Histograms
- Logic operators and values
- Flow control with conditional statements
- Python lists and dataframes
- Word counting
- Stringing words together (concatenation) and replicating them
- Getting keyboard input and converting it to numbers
- Managing a project using Scrum (sprint reviews, prototypes)
- Literate programming using interactive notebooks
- Using the command line interface (terminal, shell)
- Using IPython, Jupyter Lab, Google Colaboratory and DataCamp
  Workspace
- Programming paradigms: procedural, functional, literate programming
- Variables and data types
- Error types
- Operator order or precedence
- Standard data streams: stdin, stdout, stderr
- f-string formatting
- mandatory and optional function arguments (with defaults)
- function arguments vs. parameters
- Process modeling with BPMN (bpmn.io)
- BPMN pools, flows, tasks, events, gateways
- pseudocode
- Comparison operators
- De Morgan's laws
- Quantum computing?

**** Code - 30 functions/operators

| print     | str         | int          | float       |
| NameError | SyntaxError | ValueError   | TypeError   |
| len       | str.split   | input        | str.strip   |
| ~==~, ~!=~    | ^ (XOR)     | and, or, not | True, False |
| return    | def         | (), [], [:]  | None        |
| list.sort | str.upper   | type         | import      |

*** 2nd sprint review
#+caption: Medieval colored woodcut scene inside a grand library with towering bookshelves. Teams of scholars in medieval robes discuss their projects. One team points to a large scroll laid out on a table, detailing their methods with hand-drawn diagrams. Another team presents a pile of ancient books, representing their literature review. A wise elder, possibly a librarian, listens intently, occasionally nodding in approval.
#+attr_latex: :width 400px
[[../img/2ndSprintReview.png]]

- Everybody *presents* their project status briefly and informally.
- Focus on the reviewed *literature* and your method or *approach*.
- Comment on you general *progress*, pride, change issues.
- Ask *questions* of the product owner and of other projects.
- *Upload* any material to your project folder in GDrive.

*** Assignments: Booleans, programming (Tue)

* DONE 9.2 Tue, 17-Oct: Programming assignments

I have opened three more simple (bonus) exercises. Solve as many of
these as you can on Tuesday:
1) [[https://lyon.instructure.com/courses/2006/assignments/15596][Spam]]: store an input string & print it in different print formats
2) [[https://lyon.instructure.com/courses/2006/assignments/15588][Formatted truth tables]]: print the truth table as an actual table
3) [[https://lyon.instructure.com/courses/2006/assignments/15582][Cone drill]]: calculate a simple formula.

Submit the links to the published DataCamp notebooks for 1+2, and to
the Google Colab notebook (because of the input) for 3.

I will comment your solutions in the notebook and give you a sample
solution.

* DONE 9.3 Wed, 18-Oct: Conditional statements

New printout new lecture new practice.

* DONE 9.4 Thu, 19-Oct: Test 6: functions, if, else
* DONE 9.5 Fri, 20-Oct: NO CLASS
* DONE 10.1 Mon, 23-Oct: If, else, elif, while loops
* DONE 10.2 Tue, 24-Oct: DataCamp assignment
* DONE 10.3 Wed, 25-Oct: For loops
* DONE 10.4 Thu, 26-Oct: Pgm assignment II
* DONE 10.5 Fri, 27-Oct NO CLASS - Pgm assignment II
* DONE 11.1 Mon, 30-Oct

- [[https://app.datacamp.com/workspace/w/d8ac4091-9134-4462-a6b0-57b255987565/edit][Programming exercises]] for =if=, =elif=, =else= ([[https://app.datacamp.com/workspace/w/d8ac4091-9134-4462-a6b0-57b255987565/edit][workspace]])

* DONE 11.2 Tue, 31-Oct

- Turn the "basic calculator" into a function and make it safe

* 11.3 Wed, 1-Nov

** Review last session
1) Getting two variables at once
   #+begin_example python
     foo, bar = map(int,input("Enter two numbers: ").split())
   #+end_example
2) Printing with f-string
   #+begin_example python
     print(f'{foo}, {bar}')
   #+end_example
3) Managing exceptions
   #+begin_src python
     try:
         foo, bar = map(int,input("Enter two numbers: ").split())
     except:
         print("Error")
   #+end_src


** Review exercises

- Bonus assignment: basic calculator function ([[https://colab.research.google.com/drive/14oM2L86Wi0qdRVZFuYRYlF940qX8wzd_?usp=sharing][colab notebook]])

- [[https://app.datacamp.com/workspace/w/d8ac4091-9134-4462-a6b0-57b255987565/edit][Programming exercises]] for =while= ([[https://app.datacamp.com/workspace/w/d8ac4091-9134-4462-a6b0-57b255987565/edit][workspace]]) and loops ([[https://app.datacamp.com/workspace/w/bee3a53b-7c8c-42c4-92f9-1ee55c065e4b/edit][workspace]])

- "Guess the number" game dissected ([[https://app.datacamp.com/workspace/w/bee3a53b-7c8c-42c4-92f9-1ee55c065e4b/edit][workspace]])


** Webscraping tables

With =pandas.read_html= (for Ethan and others)


* 11.4 Thu, 2-Nov [Test 7]

** (Bonus) Element-wise list operations

In the introductory Python course chapter for NumPy, Hugo shows that
this Python code to calculate BMI based on height and weight stored in
different lists raises a ~TypeError~ because Python "has no idea how to
do calculations on lists."
#+begin_src python
  height = [1.73, 1.68, 1.71, 1.89, 1.79]
  weight = [65.4, 59.2, 63.6, 88.4, 68.7]
  weight / height ** 2
#+end_src
He goes on to say: "You could solve this by going through each list
element one after the other, and calculating the BMI for each person
separately, but this is terribly inefficient and tiresome to write."

Write code to achieve exactly this (it's not actually that 'tiresome
to write'):
1) Calculate BMI = weight / height ** 2 for the lists shown above.
2) Print the resulting numbers. Sample output looks like this:
#+begin_example
  21.85171572722109
  20.97505668934241
  21.750282138093777
  24.74734749867025
  21.44127836209856
#+end_example

Submit a link to an appropriately documented Colab notebook for bonus
points [[https://lyon.instructure.com/courses/1700/assignments/14917][here in Canvas]] no later than June 15.

Bonus: Use the ~%timeit~ magic function in Colab to time the calculation
of the BMI with and without NumPy. For example, to run a the
corresponding BMI computation in NumPy 100 times and repeat this run
10 times, you write:
#+begin_example python
%timeit -n 100 -r 10 bmi = weight_np / height_np ** 2
#+end_example


** Rock, Paper, Scissors programming assignment

* 11.5 Fri, 3-Nov

** Test preview / review =NumPy= library (DataCamp)

1) What do you need to do to use ~np.array~ instead of ~numpy.array~?
   #+begin_src python
     import numpy as np
     docstring = np.array.__doc__
     print(docstring)
   #+end_src
2) What is the output of this code?
   #+begin_src python
     import numpy as np
     print(help(numpy.array))
   #+end_src
   #+begin_quote
   ~NameError~: name 'numpy' not defined.
   #+end_quote
3) ~array~ is a function in ~numpy~. Use it on a list ~[1,2,3]~.
   #+begin_src python
     import numpy
     print(numpy.array([1,2,3]))
   #+end_src
4) What can you do with NumPy arrays that lists cannot do?
   #+begin_src python
     # Vectorization
     foo = [1,2,3]
     print(foo * 4)
     print(np.array(foo)*4)
   #+end_src

   #+RESULTS:
   : [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
   : [ 4  8 12]
5) How many data types can a list have? How many can an array have?
   #+begin_src python
     foo = ["me", 1, True]
     print(foo, type(foo))
     print(np.array(foo))
   #+end_src

   #+RESULTS:
   : ['me', 1, True] <class 'list'>
   : ['me' '1' 'True']
6) How can you extract all array items in [5,10)?
   #+begin_src python
     foo = np.array([0,1,2,5,8,10,11,12])
   #+end_src
   Solution:
   #+begin_src python
     print(foo)
     print((foo >= 5) & (foo < 10))
     bar = (foo >= 5) & (foo < 10)
     print(foo[bar])
     print(foo[~bar]) # ~ inverts the condition: not in [5,10)

   #+end_src

   #+RESULTS:
   : [ 0  1  2  5  8 10 11 12]
   : [False False False  True  True False False False]
   : [5 8]
   : [ 0  1  2 10 11 12]
7) Can you put ~['Joe','Jim','Jane']~ and ~[1.8,1.92,1.74]~ in a NumPy
   array?
   #+begin_src python
     name = ['Joe','Jim','Jane']
     height = [1.8, 1.92, 1.74]
     np_name_height = np.array([name,height])
     print(np_name_height)
     print(type(np_name_height))
   #+end_src

   #+RESULTS:
   : [['Joe' 'Jim' 'Jane']
   :  ['1.8' '1.92' '1.74']]
   : <class 'numpy.ndarray'>
8) Consider this 2D array - how can you extract the element ~1.92~?
   #+begin_src python
     weight = [179.,210.,140.]
     height = [1.8, 1.92, 1.74]
     np_weight_height = np.array([weight,height])
     print(np_weight_height)
   #+end_src

   #+RESULTS:
   : [[179.   210.   140.  ]
   :  [  1.8    1.92   1.74]]

   Solution:
   #+begin_src python
     print(np_weight_height[1,1])
   #+end_src

   #+RESULTS:
   : 1.92
9) What does the =:= operator do in NumPy arrays?
   #+begin_src python
     print(foo)
     print(foo[:]) # all elements
     print(foo[:-1])  # all except the last element
     print(foo[3:5])  # elements foo[3], foo[4] but not foo[5]
   #+end_src

   #+RESULTS:
   : [ 0  1  2  5  8 10 11 12]
   : [ 0  1  2  5  8 10 11 12]
   : [ 0  1  2  5  8 10 11]
   : [5 8]
10) Compute the arithmetic average of ~np_weight_height~ over both
    dimensions of the matrix:
    #+begin_src python
      print(np_weight_height[0,])
      print(np_weight_height[1,])      
      print(np.mean(np_weight_height[0,]))
      print(np.mean(np_weight_height[1,]))     
    #+end_src

    #+RESULTS:
    : [179. 210. 140.]
    : [1.8  1.92 1.74]
    : 176.33333333333334
    : 1.82

-----
Note: There is a whole course on =NumPy= [[https://app.datacamp.com/learn/courses/introduction-to-numpy][at DataCamp]] (intermediate+)



* 12.1 Mon, 6-Nov

* 12.2 Tue, 7-Nov

** Complete Test 7 - NumPy
